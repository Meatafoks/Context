import { ContainerInstance } from '../ContainerInstance'
import { Constructable } from '../types/Constructable'
import { ContainerIdentifier } from '../types/ContainerIdentifier'
import { ContainerScope } from '../types/ContainerScope'
import { ContextComponentIdentifier } from '../types/ContextComponentIdentifier'

/**
 * Метаданные службы используются для инициализации службы и хранения ее состояния.
 */
export interface ServiceMetadata<Type = unknown> {
  /**
   * Идентификатор службы, используемый для регистрации службы в контейнере.
   */
  id: ContextComponentIdentifier

  /**
   * Область внедрения для службы.
   *  - служба `singleton` всегда будет создаваться в контейнере по умолчанию, независимо от того, кто ее регистрирует
   *  - служба с областью `container` будет создана один раз при запросе из данного контейнера
   *  - служба с областью `transient` будет создаваться каждый раз при запросе
   */
  scope: ContainerScope

  /**
   * Определение класса службы, которое используется для инициализации данной службы.
   * Это свойство может быть равно null, если значение службы установлено вручную.
   * Если идентификатор не установлен, то оно служит идентификатором службы.
   */
  type: Constructable<Type> | null

  /**
   * Функция-фабрика, используемая для инициализации этой службы.
   * Может быть обычной функцией ("createCar", например),
   * или другой службой, которая создает этот экземпляр ([CarFactory, "createCar"], например).
   */
  factory: [Constructable<unknown>, string] | CallableFunction | undefined

  /**
   * Значение службы, которое будет использоваться вместо создания экземпляра службы.
   */
  value: unknown | Symbol

  /**
   * Позволяет настроить несколько экземпляров разных классов под одной строкой идентификатора службы или токеном.
   */
  multiple: boolean

  /**
   * Указывает, следует ли создавать новый экземпляр сразу после регистрации класса.
   * По умолчанию зарегистрированные классы создаются только при запросе из контейнера.
   *
   * _Примечание: Этот параметр игнорируется для временных служб._
   */
  eager: boolean

  /**
   * Карта контейнеров, ссылающихся на эту метаданные. Это используется, когда контейнер
   * наследует определения и значения родителей для отслеживания жизненного цикла
   * метаданных. А именно, служба может быть удалена только в том случае, если она
   * ссылается только на контейнер, который удаляется.
   */
  referencedBy: Map<ContainerIdentifier, ContainerInstance>
}
