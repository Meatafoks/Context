export interface ContainerOptions {
  /**
   * Управляет поведением, когда служба уже зарегистрирована с тем же идентификатором. Допустимы следующие значения:
   *
   * - `throw` - возникает ошибка `ContainerCannotBeCreatedError`
   * - `overwrite` - предыдущий контейнер уничтожается, и создается новый
   * - `returnExisting` - возвращает существующий контейнер или вызывает ошибку `ContainerCannotBeCreatedError`, если
   *   указанные параметры отличаются от параметров существующего контейнера
   *
   *   Значение по умолчанию - `returnExisting`.
   */
  onConflict: 'throw' | 'overwrite' | 'returnExisting'

  /**
   * Управляет поведением, когда запрашиваемый тип не существует в текущем контейнере. Допустимы следующие значения:
   *
   * - `allowLookup` - родительский контейнер будет проверен на наличие зависимости
   * - `localOnly` - возникает ошибка `ServiceNotFoundError`
   *
   * Значение по умолчанию - `allowLookup`.
   */
  lookupStrategy: 'allowLookup' | 'localOnly'

  /**
   * Включает поиск глобальных (синглтон) служб перед проверкой в текущем контейнере. По умолчанию каждый тип
   * сначала проверяется в контейнере по умолчанию, чтобы вернуть синглтон-службы. Эта проверка обходит стратегию поиска,
   * установленную в контейнере, поэтому если это поведение не желательно, его можно отключить с помощью этого флага.
   *
   * Значение по умолчанию - `true`.
   */
  allowSingletonLookup: boolean

  /**
   * Управляет тем, как дочерний контейнер наследует определения служб от родительского контейнера. Допустимы следующие значения:
   *
   * - `none` - метаданные не наследуются
   * - `definitionOnly` - наследуются только метаданные, для каждого класса будет создан новый экземпляр
   *  - классы, созданные сразу после создания контейнера
   *  - классы, созданные впервые при запросе
   *  - `definitionWithValues` - наследуются как метаданные, так и экземпляры служб
   *  - когда родительский класс уничтожается, экземпляры в этом контейнере сохраняются
   *  - если служба зарегистрирована, но еще не создана, она будет общей при создании между двумя контейнерами
   *  - вновь зарегистрированные службы не будут общими между двумя контейнерами
   *
   * Значение по умолчанию - `none`.
   */
  inheritanceStrategy: 'none' | 'definitionOnly' | 'definitionWithValues'
}
