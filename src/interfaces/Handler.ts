import { ContainerInstance } from '../ContainerInstance'
import { Constructable } from '../types/Constructable'

/**
 * Используется для регистрации специального "обработчика", который будет выполнен на классе службы во время его инициализации.
 * Может использоваться для создания пользовательских декораторов и установки/замены свойств класса службы и параметров конструктора.
 */
export interface Handler<T = unknown> {
  /**
   * Конструктор класса службы, на котором будет выполнен обработчик.
   */
  object: Constructable<T>

  /**
   * Имя свойства класса для установки/замены значения.
   * Используется, если обработчик применяется к свойству класса.
   */
  propertyName?: string

  /**
   * Индекс параметра для установки/замены значения.
   * Используется, если обработчик применяется к параметру конструктора.
   */
  index?: number

  /**
   * Функция-фабрика, которая создает значение, которое будет установлено в свойство класса или параметр конструктора.
   * Принимает экземпляр контейнера, который запросил значение.
   * @param container
   */
  value: (container: ContainerInstance) => any
}
